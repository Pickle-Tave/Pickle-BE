plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.4'
//	id 'jacoco'
}

group = 'com.api'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	compileOnly 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'com.h2database:h2'

	//Querydsl
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	//p6spy
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'

	//AWS S3
	implementation 'io.awspring.cloud:spring-cloud-starter-aws:2.4.4'

	//Swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

	//Spring Security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.security:spring-security-test'

	// Spring Cloud
	implementation platform("org.springframework.cloud:spring-cloud-dependencies:2023.0.0")

	// Spring Cloud Open Feign
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

	// Oauth2
	implementation 'org.springframework.security:spring-security-oauth2-client'
	implementation 'org.springframework.security:spring-security-oauth2-jose'

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// Mysql
	implementation 'mysql:mysql-connector-java:8.0.33'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// Actuator
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	// Redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
}

jar {
	enabled = false
}

tasks.named('test') {
	useJUnitPlatform()
//	finalizedBy 'jacocoTestReport'
}

//jacoco {
//	toolVersion = "0.8.12"
//}

//def jacocoDir = layout.buildDirectory.dir("reports/")

//def QDomains = []
//for (qPattern in '*.QA'..'*.QZ') { // qPattern = '*.QA', '*.QB', ... '*.QZ'
//	QDomains.add(qPattern + '*')
//}

//def jacocoExcludePatterns = [
//		// 측정 안하고 싶은 패턴
//		"**/*Application*",
//		"**/*Config*",
//		"**/*Exception*",
//		"**/*Request*",
//		"**/*Response*",
//		"**/*Dto*",
//		"**/*Interceptor*",
//		"**/*Filter*",
//		"**/*Resolver*",
//]

//jacocoTestCoverageVerification {
//
//	violationRules {
//		rule {
//			// rule 활성화
//			enabled = true
//
//			// 클래스 단위로 룰 체크
//			element = 'CLASS'
//
//			// 라인 커버리지를 최소 80% 만족
//			limit {
//				counter = 'LINE'
//				value = 'COVEREDRATIO'
//				minimum = 0.80
//			}
//
//			// 브랜치 커버리지를 최소 80% 만족
//			limit {
//				counter = 'BRANCH'
//				value = 'COVEREDRATIO'
//				minimum = 0.80
//			}
//
//			excludes = jacocoExcludePatterns + QDomains
//		}
//	}
//}

//jacocoTestReport {
//	dependsOn test	// 테스트가 수행되어야만 report를 생성할 수 있도록 설정
//	reports {
//		html.required.set(true)
//		xml.required.set(true)
//		csv.required.set(true)
//		html.destination jacocoDir.get().file("jacoco/index.html").asFile
//		xml.destination jacocoDir.get().file("jacoco/index.xml").asFile
//		csv.destination jacocoDir.get().file("jacoco/index.csv").asFile
//	}
//
//	afterEvaluate {
//		classDirectories.setFrom(
//				files(classDirectories.files.collect {
//					fileTree(dir: it, excludes: jacocoExcludePatterns + QDomains) // Querydsl 관련 제거
//				})
//		)
//	}
//	finalizedBy jacocoTestCoverageVerification
//}

def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
	main.java.srcDirs += [ querydslDir ]
}

tasks.withType(JavaCompile) {
	options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}

clean.doLast {
	file(querydslDir).deleteDir()
}